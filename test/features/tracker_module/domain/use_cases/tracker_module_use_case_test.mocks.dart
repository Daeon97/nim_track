// Mocks generated by Mockito 5.4.1 from annotations
// in nim_track/test/features/tracker_module/domain/use_cases/tracker_module_use_case_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nim_track/core/errors/failure.dart' as _i5;
import 'package:nim_track/features/tracker_module/domain/entities/tracker_module_entity.dart'
    as _i6;
import 'package:nim_track/features/tracker_module/domain/repositories/tracker_module_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TrackerModuleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrackerModuleRepository extends _i1.Mock
    implements _i3.TrackerModuleRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TrackerModuleEntity>> getTrackerModule(
          {required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTrackerModule,
          [],
          {#id: id},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.TrackerModuleEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.TrackerModuleEntity>(
          this,
          Invocation.method(
            #getTrackerModule,
            [],
            {#id: id},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.TrackerModuleEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.TrackerModuleEntity>(
          this,
          Invocation.method(
            #getTrackerModule,
            [],
            {#id: id},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TrackerModuleEntity>>);
  @override
  _i4.Future<
      _i2.Either<_i5.Failure,
          List<_i6.TrackerModuleEntity>>> listTrackerModules() =>
      (super.noSuchMethod(
        Invocation.method(
          #listTrackerModules,
          [],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.Failure, List<_i6.TrackerModuleEntity>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.TrackerModuleEntity>>(
          this,
          Invocation.method(
            #listTrackerModules,
            [],
          ),
        )),
        returnValueForMissingStub: _i4.Future<
                _i2.Either<_i5.Failure, List<_i6.TrackerModuleEntity>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.TrackerModuleEntity>>(
          this,
          Invocation.method(
            #listTrackerModules,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TrackerModuleEntity>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> updateTrackerModuleName({
    required int? id,
    required String? name,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTrackerModuleName,
          [],
          {
            #id: id,
            #name: name,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #updateTrackerModuleName,
            [],
            {
              #id: id,
              #name: name,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, String>>.value(
                _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #updateTrackerModuleName,
            [],
            {
              #id: id,
              #name: name,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);
}
